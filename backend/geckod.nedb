{"_id":"declarative-mixins-for-the-web","title":"Mixins as components: a lego design pattern for the web","type":"article","date":{"$$date":1439330400000},"tags":["Article","HTML5","Web Components"],"thumbnail":"/media/thumbnails/lego.jpg","main":"<p>\r\n    A common <q>Design Pattern</q> in the mess that is Web UI's involves using\r\n    an already built jQuery functionalities. Let's imagine we have a plug-in which\r\n    colors an element on a click. The plug-in would be used in the following way:\r\n<code class = \"language javascript\">\r\n$('#my-selector').colorOnClick()\r\n</code>\r\n</p>\r\n\r\n<p>\r\n    This is incredibly messy, and not sustainable for large and complex UIs, the\r\n    reasons for which will be listed below. The movement towards\r\n    <a href = \"http://webcomponents.org/\">web components</a> is a step in the\r\n    right direction, especially with\r\n    <a href = \"https://www.polymer-project.org/1.0/\">Polymer's</a> behaviors,\r\n    <a href = \"https://angularjs.org/\">Angular's</a> directives and all the\r\n    100's of other JavaScript frameworks being developed roughly by the rate by\r\n    which boot-camps shit out JavaScript developers.\r\n    <br/>\r\n    <em>Are there any viable alternatives?</em>\r\n</p>\r\n\r\n<p>\r\n    A honorable mention is the declarative alternative proposed by\r\n    <a href = \"https://angularjs.org/\">Googlers</a>:\r\n\r\n<code class = \"language html\">\r\n&lt;div colorOnClick class=\"my-class\">&lt;/div>\r\n</code>\r\n\r\n</p>\r\n\r\n\r\n<p>\r\n    And here's a declarative alternative using composition:\r\n<code class = \"language html\">\r\n&lt;div class=\"my-class\"&gt;\r\n    &lt;colorOnClick&gt;&lt;/colorOnClick&gt;\r\n&lt;/div&gt;\r\n</code>\r\n    This is nothing new and has been\r\n    <a href = \"https://en.wikipedia.org/wiki/Component-based_software_engineering\">\r\n    used by Game Developers for ages</a>. Let's compare the two approaches and\r\n    see which one fails short. (Hint: It's the first one).\r\n</p>\r\n\r\n\r\n<h3>Binding Points</h3>\r\n\r\n<div class = \"comparison\">\r\n\r\n    <div>\r\n        <h5>Imperative</h5>\r\n        The imperative approach has <em>two binding points for each element</em>,\r\n        Firstly, each element's id must be known:\r\n<code class = \"language html\">\r\n&lt;!-- markup.html -->\r\n&lt;div id=\"div1\">&lt;/div>\r\n&lt;div id=\"div2\">&lt;/div>\r\n</code>\r\n        Then the behavior is initialized in JavaScript:\r\n<code class = \"language javascript\">\r\n// javascript.js\r\ncolorOnClick(document.querySelector('#div1'))\r\ncolorOnClick(document.querySelector('#div2'))\r\n</code>\r\n        Selecting with a class somewhat helps, but restricts the selection\r\n        to using the same parameters (plug-in options).\r\n    </div>\r\n\r\n\r\n    <div>\r\n        <h5>Declarative</h5>\r\n\r\n        The declarative approach has a <em>single binding point per instance</em>.\r\n        The behavior is nested\r\n        in the DOM element it defines. An example:\r\n\r\n<code class = \"language html\">\r\n&lt;!-- markup.html -->\r\n\r\n&lt;!-- This div will be colored blue on click -->\r\n&lt;div id=\"div1\"&gt;\r\n    &lt;colorOnClick>&lt;/colorOnClick>\r\n&lt;/div&gt;\r\n\r\n\r\n&lt;!-- Another div which will be colored -->\r\n&lt;div id=\"div2\"&gt;\r\n    &lt;colorOnClick>&lt;/colorOnClick>\r\n&lt;/div&gt;\r\n</code>\r\n    </div>\r\n\r\n</div>\r\nHaving a single binding point minimizes changes overhead and eases debugging.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h3>Accessing the API</h3>\r\n\r\n<div class = \"comparison\">\r\n\r\n    <div>\r\n        <h5>Imperative</h5>\r\n        An uniform access pattern isn't statically enforced.\r\n        All developers find creative ways to access their plug-ins.\r\n<code class = \"language javascript\">\r\n//javascript.js\r\n\r\nvar element = document.querySelector('#div1')\r\n\r\n// An example with jQuery's qtip.\r\nvar qtipAPI = $(element).qtip\r\n// Accessing a behavior that plays a song\r\nvar songAPI = $(element).song().getSongControls()\r\n\r\n\r\nqtipAPI('destroy') // destroy the qtip\r\nsongAPI.play() // play a song\r\n</code>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n\r\n\r\n     <div>\r\n         <h5>Declarative</h5>\r\n         Accessing an interface of a behavior here is <em>uniform</em>\r\n         across all behaviors. It is also <em>semantic</em>,\r\n         as it uses the native access patterns.\r\n<code class = \"language javascript\">\r\n//javascript.js\r\n\r\nvar element = document.querySelector('#div1')\r\n\r\n// Accessing a behavior that zooms the element\r\nvar zoomAPI = element.querySelector('zoomBehaviour')\r\n// Accessing a behavior that plays a song\r\nvar songAPI = element.querySelector('songBehaviour')\r\n// Accessing a native video element\r\nvar video   = element.querySelector(\"video\")\r\n\r\n\r\nzoomAPI.zoom() // zoom\r\nsongAPI.play() // play a song\r\nvideo.play()   // play a video\r\n</code>\r\n             </li>\r\n         </ul>\r\n     </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h3>Server side prerendering</h3>\r\n\r\nImagine a situation, where you would like to serve users different versions /\r\nstates of the UI.\r\n\r\n<div class = \"comparison\">\r\n    <div>\r\n        <h5>Imperative</h5>\r\n        When using an imperative approach, a prerendered state is cumbersome.\r\n        The templating engine needs to render JavaScript, which has poor templating\r\n        support ans is in general plain fugly.\r\n<code class = \"language javascript\">\r\n// prerendered js\r\n// Using the {{ }} syntax for rendering server side variables\r\nvar element = ...\r\n\r\n// Initialize the functionality with server-side rendered variables\r\nmyFunctionality({{param1}}, {{param2}}, {{param3}})\r\n</code>\r\n    </div>\r\n\r\n    <div>\r\n        <h5>Declarative</h5>\r\n        Using a declarative aproach is consistent with rendering html.\r\n<code class = \"language html\">\r\n&lt;element>\r\n    &lt;my-functionality param1=\"{{param1}}\" param2=\"{{param2}}\">&lt;/my-functionality>\r\n&lt;/element>\r\n</code>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h3>Communication: Events</h3>\r\n\r\n<div class = \"comparison\">\r\n\r\n    <div>\r\n        <h5>Imperative</h5>\r\n        Inter-functionality communication using the most common pattern: (events)\r\n        in a imperative UI involves firing an event on the host element.\r\n<code class = \"language javascript\">\r\n// .. somewhere from within a zooming function\r\nelement.dispatchEvent(new CustomEvent('zoomed'))\r\n\r\n// somewhere someone subscribes.\r\nelem.addEventListener('zoomed', ..)\r\n</code>\r\n    </div>\r\n\r\n    <div>\r\n        <h5>Declarative</h5>\r\n        For better or for worse, the declarative approach gives the freedom to\r\n        to work with events, generated and contained within functionalities.\r\n        This is helpful if you need to tie an event to specific functionality.\r\n<code class = \"language javascript\">\r\n// .. somewhere from within a zooming behavior\r\nbehavior.dispatchEvent(new CustomEvent('zoomed'))\r\n\r\n// .. somewhere from within another zooming behavior,\r\n// which has the same parent element\r\nbehavior.dispatchEvent(new CustomEvent('zoomed'))\r\n\r\n// .. someone somewhere listens only to the first behavior\r\ndocument.querySelector('behaviour1').addEventListener('zoomed', ..)\r\n</code>\r\n    </div>\r\n"}
{"_id":"free-platform-as-a-service-paas-providers-comparison","title":"Free platform as a service (PaaS) providers comparison","type":"article","date":{"$$date":1439330400000},"tags":["Article","Cloud Computing"],"thumbnail":"/media/thumbnails/cloud.jpg","main":"<p>\r\n    Assumption: you are familiar with the concept\r\n    of\r\n    <a href = \"https://en.wikipedia.org/wiki/Platform_as_a_service\">\r\n        PaaS\r\n    </a>. Bellow you can find an extensive comparison of popular <em>PaaS</em>\r\n    hosting solutions, and how their <em>free</em> tier ranks.\r\n\r\n\r\n    <table>\r\n\r\n        <tr>\r\n            <th colspan = \"2\"><em>General</em></th>\r\n            <th colspan = \"4\"><em>Platforms</em></th>\r\n            <th colspan = \"5\"><em>Technical</em></th>\r\n        </tr>\r\n        <tr>\r\n            <th>Company</th>\r\n            <th>PaaS</th>\r\n\r\n            <th>Runtimes</th>\r\n            <th>Databases</th>\r\n            <th>APIs / Services</th>\r\n            <th>Addons</th>\r\n\r\n            <th>Number of Apps</th>\r\n            <th>Storage</th>\r\n            <th>Memory</th>\r\n            <th>Bandwidth</th>\r\n            <th>CPU Cores</th>\r\n        </tr>\r\n\r\n\r\n        <tr>\r\n            <td>Red Hat</td>\r\n            <td>\r\n                <a href = \"https://www.openshift.com\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"https://upload.wikimedia.org/wikipedia/en/3/3a/OpenShift-LogoType.svg\"/>\r\n                </a>\r\n            </td>\r\n\r\n            <td>Java EE(JBoss, Tomcat), PHP(Zend), Perl, Python, Ruby, Node.js</td>\r\n            <td>MongoDB, MySQL, PostgreSQL</td>\r\n            <td>Jenkins, SwitchYard, Cron, SSH</td>\r\n            <td>\r\n                <a href = \"https://hub.openshift.com/addons/\">Free Addon List</a>\r\n            </td>\r\n            <td>3</td>\r\n            <td>3 * 1GB (Disk / Database)</td>\r\n            <td>3 * 512MB</td>\r\n            <td>Unlimited</td>\r\n            <td>3</td>\r\n        </tr>\r\n\r\n\r\n\r\n\r\n\r\n        <tr>\r\n            <td>Salesforce</td>\r\n            <td>\r\n                <a href = \"https://www.heroku.com\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"http://www.wizarddevelopment.com/assets/heroku-logo-fed730300aab0681454914855ef3c445.png\" />\r\n                </a>\r\n            </td>\r\n\r\n            <td>Ruby, Java, Node.Js, Python, PHP, Clojure, Scala, Go</td>\r\n            <td>Postgres, Redis</td>\r\n            <td>Git</td>\r\n            <td><a href = \"https://elements.heroku.com/addons\">\r\n                Free Addon List</a></td>\r\n\r\n\r\n            <td>1</td>\r\n            <td>10K Rows / 25MB Database, 1 GB Disk</td>\r\n            <td>512MB</td>\r\n            <td>2TB / Month</td>\r\n            <td>18/24 (A single core, must be inactive at least 6 hours a day)</td>\r\n        </tr>\r\n\r\n\r\n\r\n        <tr>\r\n            <td>Microsoft</td>\r\n            <td>\r\n                <a href = \"https://azure.microsoft.com/\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Windows_logo_-_2012.svg/2000px-Windows_logo_-_2012.svg.png\" />\r\n                <div>(Via Dreamspark)</div>\r\n                </a>\r\n            </td>\r\n\r\n            <td>.NET, Java, PHP, Node.js, Python</td>\r\n            <td>None Free</td>\r\n            <td>Git, TFS, GitHub, Visual Studio Online</td>\r\n            <td><a href = \"http://azure.microsoft.com/en-us/marketplace/developer-services/all/\">\r\n                Free Addon List</a></td>\r\n\r\n\r\n            <td>10</td>\r\n            <td>1 GB Disk</td>\r\n            <td>1024MB per region, 3 regions</td>\r\n            <td>165 MB per day</td>\r\n            <td>1/24 (A core for max 60 min / day)</td>\r\n        </tr>\r\n\r\n\r\n\r\n\r\n\r\n        <tr>\r\n            <td>Google</td>\r\n            <td>\r\n                <a href = \"https://cloud.google.com/appengine/\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"http://3.bp.blogspot.com/-shlkF4-lOrI/UqEk25whCBI/AAAAAAAAAV4/vAwo6UN2Sis/s1600/appengine_final.png\"/>\r\n                </a>\r\n            </td>\r\n\r\n            <td>Python, Java, PHP, Go</td>\r\n            <td>MySQL, Google NoSQL datastore</td>\r\n            <td>Git, Jenkins, IDE SDKs</td>\r\n            <td></td>\r\n\r\n            <td>Unlimited</td>\r\n            <td>\r\n                <span>1GB Disk<span>,\r\n                <span>1GB Database</span>,\r\n                <span> 5GB\r\n                    <a href = \"https://cloud.google.com/appengine/docs/quotas?hl=en#Default_Gcs_Bucket\">\r\n                        Bucket\r\n                    </a>\r\n                </span>\r\n            </td>\r\n            <td>Unlimited</td>\r\n            <td>1GB Outgoing + 1GB Incoming / Day</td>\r\n            <td>28/24 (28 instance hours)</td>\r\n        </tr>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <tr>\r\n            <td>IBM</td>\r\n            <td>\r\n                <a href = \"http://www.ibm.com/cloud-computing/bluemix/\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"http://www.dbtekpro.com/wp-content/uploads/2015/07/bluemix-logo.png\"/>\r\n                </a>\r\n            </td>\r\n\r\n            <td>Java, Node.js, Go, PHP, Python, Ruby, .NET (Mono)</td>\r\n            <td>Mongo, MySQL, PostreSQL, IBM XPages, Redis</td>\r\n            <td>Git, Cloud Foundry</td>\r\n            <td>\r\n                <a href = \"https://console.ng.bluemix.net/catalog/\">\r\n                    Free Addon List\r\n                </a>\r\n            </td>\r\n\r\n            <td>Unlimited</td>\r\n            <td>\r\n                2GB per App\r\n            </td>\r\n            <td>512MB</td>\r\n            <td>Unlimited</td>\r\n            <td>Unlimited</td>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td>SAP</td>\r\n            <td>\r\n                <a href = \"http://hcp.sap.com/index.html\">\r\n                <img style = \"width: 70px\"\r\n                     src = \"https://upload.wikimedia.org/wikipedia/commons/5/59/SAP_2011_logo.svg\"/>\r\n                </a>\r\n            </td>\r\n\r\n            <td>Java, Node.js, Go, PHP, Python, Ruby, .NET (Mono)</td>\r\n            <td>Mongo, MySQL, PostreSQL, IBM XPages, Redis</td>\r\n            <td>Git, Cloud Foundry</td>\r\n            <td>\r\n                <a href = \"https://console.ng.bluemix.net/catalog/\">\r\n                    Free Addon List\r\n                </a>\r\n            </td>\r\n\r\n            <td>Unlimited</td>\r\n            <td>\r\n                2GB per App\r\n            </td>\r\n            <td>512MB</td>\r\n            <td>Unlimited</td>\r\n            <td>Unlimited</td>\r\n        </tr>\r\n    </table>\r\n"}
{"_id":"trololo","title":"trololo","type":"project","date":{"$$date":1439330400000},"tags":["HTML5","Web Components"],"thumbnail":"/media/thumbnails/thecenter.jpg"}
